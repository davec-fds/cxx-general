# Imports from caller.
Import('*')

# Include the parent directory.
env.Append(CPPPATH = ['..'])

# Configure without CFLAGS to avoid errors from extra warnings.
if not env.GetOption('clean') :
  tmpccflags = env['CCFLAGS']
  env['CCFLAGS'] = []
  
  checkheaders = [
    'sys/types.h',
    'sys/stat.h' ,
    'sys/file.h' ,
    'unistd.h'   ,
    'fcntl.h'    ,
    'pwd.h'
  ]
  checktypes = [
    [ 'dev_t'      , 'sys/types.h' ],
    [ 'ino_t'      , 'sys/types.h' ],
    [ 'mode_t'     , 'sys/types.h' ],
    [ 'nlink_t'    , 'sys/types.h' ],
    [ 'uid_t'      , 'sys/types.h' ],
    [ 'gid_t'      , 'sys/types.h' ],
    [ 'off_t'      , 'sys/types.h' ],
    [ 'blksize_t'  , 'sys/types.h' ],
    [ 'blkcnt_t'   , 'sys/types.h' ],
    [ 'time_t'     , 'sys/stat.h'  ],
    [ 'struct stat', 'sys/stat.h'  ],
  ]
  checkfunctions = [
    'open'     ,
    'close'    ,
    'fcntl'    ,
    'link'     ,
    'symlink'  ,
    'rename'   ,
    'unlink'   ,
    'chmod'    ,
    'fchmod'   ,
    'chown'    ,
    'fchown'   ,
    'truncate' ,
    'ftruncate',
    'readlink' ,
    'write'    ,
    'getcwd'   ,
    'stat'     ,
    'lstat'    ,
    'fstat'    ,
    'read'     ,
    'lseek'
  ]
  
  conf = Configure(env)
  
  for header in checkheaders :
    if not conf.CheckHeader(header = header, language = 'C++') :
      print 'Header ' + header + ' is required.'
      exit(1)
  for type in checktypes :
    if not conf.CheckType(type_name = type[0], includes = '#include <' + type[1] + '>', language = 'C++') :
      print 'Type ' + type[0] + ' is required.'
      exit(1)
  for function in checkfunctions :
    if not conf.CheckFunc(function_name = function, language = 'C++') :
      print 'Function ' + function + '() is required.'
      exit(1)
  
  env = conf.Finish();
  
  # Restore CFLAGS.
  env['CCFLAGS'] = tmpccflags

# Object files.
o_POSIXFile = env.Object      (target = 'POSIXFile', source = ['POSIXFile.c++'])
s_POSIXFile = env.SharedObject(target = 'POSIXFile', source = ['POSIXFile.c++'])

# Create a dictionary containing all necessary information and objects to
# compile with POSIXFile.
cPOSIXFile = { 'obj'        : [o_POSIXFile]              ,
               'sobj'       : [s_POSIXFile]              ,
               'include'    : ['POSIXFile']              ,
               'headers'    : ['POSIXFile/POSIXFile.h++'],
               'defines'    : []                         ,
               'own_obj'    : [o_POSIXFile]              ,
               'own_sobj'   : [s_POSIXFile]              ,
               'own_include': 'POSIXFile'                ,
               'own_headers': ['POSIXFile/POSIXFile.h++'],
               'own_defines': []                           }

# Return.
Return('cPOSIXFile')

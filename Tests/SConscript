# Imports.
from sconsgeneral import Module

# Imports from caller.
Import('*')

# Include the parent directory.
env.Append(CPPPATH = ['..'])

# Define testing environment.
env.Append(CPPDEFINES = ['TESTING'])

# Create program-specific environments.
#env_ArbInt = env.Copy()
#cArbInt.apply(env_ArbInt)
#env_Arb = env.Copy()
#cArb.apply(env_Arb)
#env_Timestamp = env.Copy()
#cTimestamp.apply_includes(env_Timestamp)
#env_INIFile = env.Copy()
#cINIFile.apply(env_INIFile)

# Module definition.
pTests            = Module()
pTests.own_module = 'Tests'

# Object files.
o_NumInfo     = env          .Object(target = 'NumInfo'    , source = ['NumInfo.c++'    ]); pTests.own_objects.append(o_NumInfo    )
o_demangle    = env          .Object(target = 'demangle'   , source = ['demangle.c++'   ]); pTests.own_objects.append(o_demangle   )
o_Exception   = env          .Object(target = 'Exception'  , source = ['Exception.c++'  ]); pTests.own_objects.append(o_Exception  )
o_to_string   = env          .Object(target = 'to_string'  , source = ['to_string.c++'  ]); pTests.own_objects.append(o_to_string  )
o_abs         = env          .Object(target = 'abs'        , source = ['abs.c++'        ]); pTests.own_objects.append(o_abs        )
o_longDiv     = env          .Object(target = 'longDiv'    , source = ['longDiv.c++'    ]); pTests.own_objects.append(o_longDiv    )
o_baseConvert = env          .Object(target = 'baseConvert', source = ['baseConvert.c++']); pTests.own_objects.append(o_baseConvert)
o_SafeInt     = env          .Object(target = 'SafeInt'    , source = ['SafeInt.c++'    ]); pTests.own_objects.append(o_SafeInt    )
o_rppower     = env          .Object(target = 'rppower'    , source = ['rppower.c++'    ]); pTests.own_objects.append(o_rppower    )
#o_ArbInt    = env_ArbInt   .Object(target = 'ArbInt'   , source = ['ArbInt.c++'   ])
#o_Arb       = env_Arb      .Object(target = 'Arb'      , source = ['Arb.c++'      ])
#o_Timestamp = env_Timestamp.Object(target = 'Timestamp', source = ['Timestamp.c++'])
#o_INIFile   = env_INIFile  .Object(target = 'INIFile'  , source = ['INIFile.c++'  ])

# Programs.
pTests.own_programs.append(env          .Program(target = 'NumInfo'    , source =                            [o_NumInfo    ]))
pTests.own_programs.append(env          .Program(target = 'demangle'   , source =                            [o_demangle   ]))
pTests.own_programs.append(env          .Program(target = 'Exception'  , source =                            [o_Exception  ]))
pTests.own_programs.append(env          .Program(target = 'to_string'  , source =                            [o_to_string  ]))
pTests.own_programs.append(env          .Program(target = 'abs'        , source =                            [o_abs        ]))
pTests.own_programs.append(env          .Program(target = 'longDiv'    , source =                            [o_longDiv    ]))
pTests.own_programs.append(env          .Program(target = 'baseConvert', source =                            [o_baseConvert]))
pTests.own_programs.append(env          .Program(target = 'SafeInt'    , source =                            [o_SafeInt    ]))
pTests.own_programs.append(env          .Program(target = 'rppower'    , source =                            [o_rppower    ]))
#env_ArbInt   .Program(target = 'ArbInt'   , source = cArbInt   .get_objects() + [o_ArbInt   ])
#env_Arb      .Program(target = 'Arb'      , source = cArb      .get_objects() + [o_Arb      ])
#env_Timestamp.Program(target = 'Timestamp', source = cTimestamp.get_objects() + [o_Timestamp])
#env_INIFile  .Program(target = 'INIFile'  , source = cINIFile  .get_objects() + [o_INIFile  ])

Return('pTests')

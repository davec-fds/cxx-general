# Imports.
from sconsgeneral import Module

# Imports from caller.
Import('*')

# Include the parent directory.
env.Append(CPPPATH = ['..'])

# Create our module definition.
cget_errorText            = Module()
cget_errorText.own_module = 'get_errorText'

# Headers.
cget_errorText.own_include = 'get_errorText'
cget_errorText.own_headers = ['get_errorText.h++']

# Configure without CCFLAGS, or configure will fail with all the extra
# warnings that are turned on.
if not env.GetOption('clean') :
  tmpccflags     = env['CCFLAGS']
  env['CCFLAGS'] = []
  
  conf = Configure(env)
  
  if conf.CheckFunc(function_name = 'strerror_r', language = 'C++') :
    cget_errorText.own_defines += ['GET_ERRORTEXT_REENTRANT']
  
  env = conf.Finish()
  
  # Restore CCFLAGS.
  env['CCFLAGS'] = tmpccflags

# Create define file.
define_env = env.Copy()
cget_errorText.apply(define_env)
test = define_env.Define('get_errorText_config')
cget_errorText.own_headers.append(test)

# Object files.
o_get_errorText = env.Object      (target = 'get_errorText', source = ['get_errorText.c++'])
s_get_errorText = env.SharedObject(target = 'get_errorText', source = ['get_errorText.c++'])
cget_errorText.own_objects        += [o_get_errorText]
cget_errorText.own_shared_objects += [s_get_errorText]

# Return.
Return('cget_errorText')

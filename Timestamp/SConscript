# Imports.
from sconsgeneral import Module

# Imports from caller.
Import('*')

# Include the parent directory.
env.Append(CPPPATH = ['..'])

# Bring in dependencies.
cArb          .apply_includes(env)
cget_errorText.apply_includes(env)

# Create our module definition.
cTimestamp = Module()
cTimestamp.take(cArb          )
cTimestamp.take(cget_errorText)

# Headers.
cTimestamp.own_include = 'Timestamp'
cTimestamp.own_headers = ['Timestamp.h++']

# Configure without CCFLAGS, or configure will fail with all the extra
# warnings that are turned on.
if not env.GetOption('clean') :
  tmpccflags     = env['CCFLAGS']
  env['CCFLAGS'] = []
  
  conf = Configure(env)
  
  if conf.CheckHeader(header = 'windows.h', language = 'C++') :
    cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_GETSYSTEMTIME']
    cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_REENTRANT'    ]
  elif conf.CheckFunc(function_name = 'gettimeofday', language = 'C++') :
    if conf.CheckFunc(function_name = 'gmtime_r', language = 'C++') :
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_GETTIMEOFDAY_GMTIME_R']
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_REENTRANT'            ]
    else :
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_GETTIMEOFDAY_GMTIME']
  else :
    if conf.CheckFunc(function_name = 'gmtime_r', language = 'C++') :
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_TIME_GMTIME_R']
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_REENTRANT'    ]
    else :
      cTimestamp.own_defines += ['TIMESTAMP_SYSTIME_TIME_GMTIME']
  
  env = conf.Finish()
  
  # Restore CCFLAGS.
  env['CCFLAGS'] = tmpccflags

# Create define file.
define_env = env.Copy()
cTimestamp.apply(define_env)
test = define_env.Define('Timestamp_config')
cTimestamp.own_headers.append(test)

# Object files.
o_Timestamp = env.Object      (target = 'Timestamp', source = ['Timestamp.c++'])
s_Timestamp = env.SharedObject(target = 'Timestamp', source = ['Timestamp.c++'])
cTimestamp.own_objects        += [o_Timestamp]
cTimestamp.own_shared_objects += [s_Timestamp]

# Return.
Return('cTimestamp')

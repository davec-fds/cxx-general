# Imports.
from sconsgeneral import Module

# Imports from caller.
Import('*')

# Include the parent directory.
env.Append(CPPPATH = ['..'])

# Bring in dependencies.
cArb.apply(env)

# Create our module definition.
cTimestamp = Module()
cTimestamp.take(cArb)

# Headers.
cTimestamp.own_include = 'Timestamp'
cTimestamp.own_headers = ['Timestamp.h++']

# Define... uh, defines.
have_windows_h    = 0
have_sys_time_h   = 0
have_time_h       = 0
have__systemtime  = 0
have_lpsystemtime = 0
have_timeval      = 0
have_timezone     = 0
have_gettimeofday = 0
have_time_t       = 0
have_tm           = 0
have_time         = 0
have_gmtime       = 0
have_gmtime_r     = 0

# Configure without CCFLAGS, or configure will fail with all the extra
# warnings that are turned on.
if not env.GetOption('clean') :
  tmpccflags     = env['CCFLAGS']
  env['CCFLAGS'] = []
  
  conf = Configure(env)
  
  have_windows_h  = conf.CheckHeader(header = 'windows.h',  language = 'C++')
  have_sys_time_h = conf.CheckHeader(header = 'sys/time.h', language = 'C++')
  have_time_h     = conf.CheckHeader(header = 'time.h',     language = 'C++')
  
  if have_windows_h :
    have__systemtime  = conf.CheckType(type_name = '_SYSTEMTIME',  includes = '#include <windows.h>', language = 'C++')
    have_lpsystemtime = conf.CheckType(type_name = 'LPSYSTEMTIME', includes = '#include <windows.h>', language = 'C++')
  
  if have_sys_time_h :
    have_timeval  = conf.CheckType(type_name = 'timeval',  includes = '#include <sys/time.h>', language = 'C++')
    have_timezone = conf.CheckType(type_name = 'timezone', includes = '#include <sys/time.h>', language = 'C++')
    have_gettimeofday = conf.CheckFunc(function_name = 'gettimeofday', language = 'C++')
  
  if have_time_h :
    have_time_t = conf.CheckType(type_name = 'time_t', includes = '#include <time.h>', language = 'C++')
    have_tm     = conf.CheckType(type_name = 'tm',     includes = '#include <time.h>', language = 'C++')
    have_time     = conf.CheckFunc(function_name = 'time',     language = 'C++')
    have_gmtime   = conf.CheckFunc(function_name = 'gmtime',   language = 'C++')
    have_gmtime_r = conf.CheckFunc(function_name = 'gmtime_r', language = 'C++')
  
  env = conf.Finish()
  
  # Restore CCFLAGS.
  env['CCFLAGS'] = tmpccflags

# Set defines
if have_windows_h    : cTimestamp.own_defines += [ 'HAVE_WINDOWS_H'    ]
if have_sys_time_h   : cTimestamp.own_defines += [ 'HAVE_SYS_TIME_H'   ]
if have_time_h       : cTimestamp.own_defines += [ 'HAVE_TIME_H'       ]
if have__systemtime  : cTimestamp.own_defines += [ 'HAVE__SYSTEMTIME'  ]
if have_lpsystemtime : cTimestamp.own_defines += [ 'HAVE_LPSYSTEMTIME' ]
if have_timeval      : cTimestamp.own_defines += [ 'HAVE_TIMEVAL'      ]
if have_timezone     : cTimestamp.own_defines += [ 'HAVE_TIMEZONE'     ]
if have_gettimeofday : cTimestamp.own_defines += [ 'HAVE_GETTIMEOFDAY' ]
if have_time_t       : cTimestamp.own_defines += [ 'HAVE_TIME_T'       ]
if have_tm           : cTimestamp.own_defines += [ 'HAVE_TM'           ]
if have_time         : cTimestamp.own_defines += [ 'HAVE_TIME'         ]
if have_gmtime       : cTimestamp.own_defines += [ 'HAVE_GMTIME'       ]
if have_gmtime_r     : cTimestamp.own_defines += [ 'HAVE_GMTIME_R'     ]

# Determine what our timestamp will support.
if have_windows_h and have__systemtime and have_lpsystemtime :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_GETSYSTEMTIME' ]
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_REENTRANT'     ]
elif have_sys_time_h and have_timeval and have_timezone and have_gettimeofday and have_time_h and have_tm and have_time_t and have_gmtime_r :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_GETTIMEOFDAY_GMTIME_R' ]
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_REENTRANT'             ]
elif have_sys_time_h and have_timeval and have_timezone and have_gettimeofday and have_time_h and have_tm and have_time_t and have_gmtime :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_GETTIMEOFDAY_GMTIME' ]
elif have_time_h and have_time_t and have_time and have_tm and have_gmtime_r :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_TIME_GMTIME_R' ]
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_REENTRANT'     ]
elif have_time_h and have_time_t and have_time and have_tm and have_gmtime :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_TIME_GMTIME' ]
else :
  cTimestamp.own_defines += [ 'TIMESTAMP_SYSTIME_NONE' ]

# Apply defines.
cTimestamp.apply_defines(env)

# Object files.
o_Timestamp = env.Object      (target = 'Timestamp', source = ['Timestamp.c++'])
s_Timestamp = env.SharedObject(target = 'Timestamp', source = ['Timestamp.c++'])
cTimestamp.own_objects        += [o_Timestamp]
cTimestamp.own_shared_objects += [s_Timestamp]

# Return.
Return('cTimestamp')
